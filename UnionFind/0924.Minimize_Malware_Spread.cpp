class Solution {
public:
    vector<int> p;
    
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        for (int i = 0; i < n; i++) p.push_back(i);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (graph[i][j])
                    Union(i, j);
            }
        }
        vector<int> cmpSize(n, 0), malCnt(n, 0);
        for (int init: initial) malCnt[Find(init)]++;
        for (int i = 0; i < n; i++) cmpSize[Find(i)]++;
                        
        int ans = -1, ans_size = 0;
        sort(initial.begin(), initial.end());
        for (int init: initial) {
            int root = Find(init);
            if (malCnt[root] == 1 && cmpSize[root] > ans_size) {
                ans_size = cmpSize[root];
                ans = init;
            }
        }        
        return ans == -1 ? initial[0] : ans;
    }
    
    int Find(int x) {
        if (p[x] != x) 
            p[x] = Find(p[x]);
        return p[x];
    }
    
    void Union(int x, int y) {
        x = Find(x);
        y = Find(y);
        if (x != y) 
            p[x] = y;
    }
};
